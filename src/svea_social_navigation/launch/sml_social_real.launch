<?xml version="1.0"?>
<launch>

    <!-- Launch file arguments -->
    <!-- SET DEBUG TO TRUE AT YOUR OWN 'COMPUTATIONALLY DEMANDING' RISK -->
    <arg name="debug" default="True"/>
    <arg name="map" default="sml_planner"/>
    <arg name="local_costmap_topic" default="/costmap_node/costmap/costmap"/>
    <arg name="waypoint_topic" default="/target"/>
    <arg name="dynamic_obstacle_topic" default="/dynamic_obstacles"/>
    <arg name="static_unmapped_obstacle_topic" default="/static_unmapped_obstacles"/>
    <arg name="is_mocap" default="true"/>
    <arg name="svea_name" default="svea2"/>
    <arg name="is_sim" default="false"/>
    <arg name="use_rviz" default="false"/>
    <arg name="remote_rviz" default="true"/>
    <arg name="obstacle_map" default="sml_planner_obstacles"/>
    <arg name="initial_pose_x" default="-2.65488696"/>
    <arg name="initial_pose_y" default="-1.64422277"/>
    <arg name="initial_pose_a" default="1.57" />
    <!-- wrt to map-->
    <arg name="xavier" default="false"/>

    <!-- Start map server -->
    <node name="map_server" pkg="map_server" type="map_server" args="$(find svea_core)/maps/$(arg map).yaml" output="screen"/>

    <rosparam command="load" file="$(find svea_core)/params/$(arg obstacle_map).yaml" />

    <!-- Start RViz -->
    <node name="rviz" pkg="rviz" type="rviz" args="-d $(find svea_social_navigation)/rviz/config.rviz"/>
    <!-- Start pure_pursuit -->
    <node name="svea_social_navigation" pkg="svea_social_navigation" type="social_navigation.py" output="screen">
        <param name="use_rviz" value="$(arg use_rviz)"/>
        <param name="is_sim" value="$(arg is_sim)"/>
        <param name="remote_rviz" value="$(arg remote_rviz)" />
        <rosparam>
            state: [3.5, 4.1, 1.57, 0] # initial state (x, y, yaw)
            goal: [7.7, 7.3]
            static_unmapped_obstacles: []
            dynamic_obstacles: []
            is_pedsim: False
        </rosparam>
    </node>

    <!-- Run the costmap node -->
    <group if="$(arg is_mocap)">
        <include file="$(find svea_sensors)/launch/transforms.launch">
            <arg name="xavier" value="$(arg xavier)"/>
        </include>
    </group>
    <node name="tf_lidar_to_base_link" pkg="tf" type="static_transform_publisher" args="0 0 -0.175 0 0 0 $(arg svea_name) base_link 100" />
    <node name="tf_odom_to_base_link" pkg="tf" type="static_transform_publisher" args="0 0 0 0 0 0 base_link odom 100" />
    <node name="static_unmapped_obstacle_simulator" pkg="svea_social_navigation" type="static_unmapped_obstacle_simulator.py" />
    <node name="costmap_node" pkg="costmap_2d" type="costmap_2d_node">
        <rosparam file="$(find svea_social_navigation)/config/costmap_params_svea.yaml" command="load" ns="costmap" />
    </node>
    <!--
        state: [2.8, 3.1, 0.7853981633974483, 0] # initial state (x, y, yaw)
            goal: [7.5, 7.5]
        state: [5.5, 3.85, 1.57, 0] # initial state (x, y, yaw)
            goal: [6.3, 8]

        state: [7.6, 2.9, 1.57, 0] # initial state (x, y, yaw)
            goal: [7.6, 6.8]

        static_unmapped_obstacles: [[3.3, 5.5]]
            dynamic_obstacles: [[3, 6, 0.3, 0, 3, 4, 6, 7]] # (x, y, v, theta, x_lb, x_ub, y_lb, y_ub)
    -->
</launch>